name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ main ]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/testforcicd
  VERSION: ${{ github.sha }}
  NAME: testforcicd

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v2
      # Set up JDK 8
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
      # 1) git ignore에 등록된 application.properties 파일 생성
      - name: Make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
      # 2) 스프링 프로젝트 jar 파일 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build

  # 배포 Job
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v2
      # Docker 빌드 및 푸시
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

      # EC2 인스턴스에 Docker 이미지 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ec2-3-39-6-175.ap-northeast-2.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.NAME }}
            docker stop ${{ env.NAME }} || true
            docker rm ${{ env.NAME }} || true
            docker run -d --name ${{ env.NAME }} -p 80:10001 ${{ env.DOCKER_IMAGE }}:latest
